package com.soundbyte.view;

import com.soundbyte.controller.PlaybackControlObserver;
import com.soundbyte.controller.PlaybackController;
import com.soundbyte.controller.PlaybackControllerInterface;
import com.soundbyte.controller.UIController;
import com.soundbyte.controller.UIControllerInterface;
import com.soundbyte.model.DataModelInterface;
import com.soundbyte.model.SoundByteModel;
import com.soundbyte.model.table.NowPlayingTableObserver;
import com.soundbyte.model.table.SongTableObserver;
import com.soundbyte.util.AudioFileChooser;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import static javax.swing.JFileChooser.CANCEL_OPTION;
import static javax.swing.JFileChooser.ERROR_OPTION;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

public final class SoundByteView extends JFrame implements SongTableObserver,
        NowPlayingTableObserver
{
    private final DataModelInterface model;
    private final UIControllerInterface uiController;
    private final PlaybackControllerInterface playbackController;
    private final List<PlaybackControlObserver> playbackObservers;
    private JTable mostRecentTableWithFocus;

    /**
     * Creates and initializes the main GUI
     */
    private SoundByteView(DataModelInterface model,
            UIControllerInterface uiController,
            PlaybackControllerInterface playbackController)
    {
        this.model = model;
        this.uiController = uiController;
        this.playbackController = playbackController;
        playbackObservers = new ArrayList<>();
        model.registerObserver((SongTableObserver) this);
        model.registerObserver((NowPlayingTableObserver) this);
        registerObserver((PlaybackControlObserver) playbackController);
        initComponents();
    }

    public void registerObserver(PlaybackControlObserver o)
    {
        playbackObservers.add(o);
    }

    private void notifyPlayButtonPressed()
    {

    }

    @Override
    public void updateSongTable(Vector<Vector<Object>> data, Vector<Object> cols)
    {
        ((DefaultTableModel) songTable.getModel()).setDataVector(data, cols);
    }

    @Override
    public void updateNowPlayingTable(Vector<Vector<Object>> data,
            Vector<Object> cols)
    {
        ((DefaultTableModel) nowPlayingTable.getModel()).setDataVector(data,
                cols);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        songTablePopupMenu = new javax.swing.JPopupMenu();
        songTablePlayMenuItem = new javax.swing.JMenuItem();
        addToNowPlayingMenuItem = new javax.swing.JMenuItem();
        nowPlayingPopupMenu = new javax.swing.JPopupMenu();
        nowPlayingPlayMenuItem = new javax.swing.JMenuItem();
        clearAllMenuItem = new javax.swing.JMenuItem();
        mainPanel = new javax.swing.JPanel();
        libraryPlayerSplitPane = new javax.swing.JSplitPane();
        libraryNowPlayingSplitPane = new javax.swing.JSplitPane();
        searchLibrarySplitPane = new javax.swing.JSplitPane();
        tableScrollPane = new javax.swing.JScrollPane();
        songTable = new javax.swing.JTable();
        searchPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        titleCheckBox = new javax.swing.JCheckBox();
        artistCheckBox = new javax.swing.JCheckBox();
        albumCheckBox = new javax.swing.JCheckBox();
        genreCheckBox = new javax.swing.JCheckBox();
        yearCheckBox = new javax.swing.JCheckBox();
        allMusicButton = new javax.swing.JButton();
        nowPlayingScrollPane = new javax.swing.JScrollPane();
        nowPlayingTable = new javax.swing.JTable();
        playerPanel = new javax.swing.JPanel();
        playbackSeekSplitPane = new javax.swing.JSplitPane();
        playbackControlPanel = new javax.swing.JPanel();
        previousSongButton = new javax.swing.JButton();
        playPauseButton = new javax.swing.JButton();
        nextSongButton = new javax.swing.JButton();
        infoSeekPanel = new javax.swing.JPanel();
        currentlyPlayingSongLabel = new javax.swing.JLabel();
        seekSlider = new javax.swing.JSlider();
        currentSongTime = new javax.swing.JLabel();
        totalSongTime = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        addSongsMenuItem = new javax.swing.JMenuItem();
        addFoldersMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        optionsMenuItem = new javax.swing.JMenuItem();

        songTablePlayMenuItem.setText("Play");
        songTablePlayMenuItem.setActionCommand("playMenuItem");
        songTablePlayMenuItem.addActionListener(new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    final int firstSongToPlay = uiController.addToNowPlaying(
                        songTable.getSelectedRows());
                    playbackController.playFromNowPlayingTable(firstSongToPlay);
                }
            });
            songTablePopupMenu.add(songTablePlayMenuItem);

            addToNowPlayingMenuItem.setText("Add to Now Playing Queue");
            addToNowPlayingMenuItem.addActionListener(new ActionListener()
                {
                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        uiController.addToNowPlaying(songTable.getSelectedRows());
                    }
                });
                songTablePopupMenu.add(addToNowPlayingMenuItem);

                nowPlayingPlayMenuItem.setText("Play");
                nowPlayingPlayMenuItem.addActionListener(new ActionListener()
                    {
                        @Override
                        public void actionPerformed(ActionEvent e)
                        {
                            final int tableIndex = nowPlayingTable.getSelectionModel().getMinSelectionIndex();
                            playbackController.playFromNowPlayingTable(tableIndex);
                        }
                    });
                    nowPlayingPopupMenu.add(nowPlayingPlayMenuItem);

                    clearAllMenuItem.setText("Clear All");
                    clearAllMenuItem.setToolTipText("");
                    nowPlayingPopupMenu.add(clearAllMenuItem);

                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                    setTitle("SoundByte Media Player");
                    setMinimumSize(new java.awt.Dimension(800, 640));

                    mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.Y_AXIS));

                    libraryPlayerSplitPane.setDividerLocation(550);
                    libraryPlayerSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
                    libraryPlayerSplitPane.setResizeWeight(1.0);
                    libraryPlayerSplitPane.setContinuousLayout(true);
                    libraryPlayerSplitPane.setDoubleBuffered(true);
                    libraryPlayerSplitPane.setMinimumSize(mainPanel.getMinimumSize());
                    libraryPlayerSplitPane.setName(""); // NOI18N
                    libraryPlayerSplitPane.setPreferredSize(new java.awt.Dimension(1280, 720));

                    libraryNowPlayingSplitPane.setDividerLocation(1000);
                    libraryNowPlayingSplitPane.setResizeWeight(1.0);
                    libraryNowPlayingSplitPane.setContinuousLayout(true);
                    libraryNowPlayingSplitPane.setDoubleBuffered(true);

                    searchLibrarySplitPane.setDividerLocation(100);
                    searchLibrarySplitPane.setContinuousLayout(true);
                    searchLibrarySplitPane.setDoubleBuffered(true);

                    songTable.setAutoCreateRowSorter(true);
                    songTable.setModel(model.getSongTableModel());
                    songTable.setToolTipText("");
                    songTable.addMouseListener(new MouseAdapter()
                        {
                            @Override
                            public void mousePressed(MouseEvent e)
                            {
                                // if right click is released
                                if (SwingUtilities.isRightMouseButton(e))
                                {
                                    // get row index where right click button was released
                                    final int row = songTable.rowAtPoint(e.getPoint());
                                    ListSelectionModel selModel = songTable.getSelectionModel();
                                    // if the row is already selected, don't reselect it, or
                                    // else it will override a compound selection if one has been made
                                    if (!selModel.isSelectedIndex(row))
                                    {
                                        // select the row
                                        selModel.setSelectionInterval(row, row);
                                    }
                                    // show popup menu
                                    songTablePopupMenu.show(songTable, e.getX(), e.getY());
                                }
                                else if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2)
                                {
                                    // double click
                                    // TODO: play
                                    final int row = songTable.rowAtPoint(e.getPoint());
                                    // playbackControl.playFromSongTable(new int[]{row});
                                    System.out.println("playing row" + row);
                                }
                            }
                        });
                        songTable.setDoubleBuffered(true);
                        songTable.addFocusListener(new FocusListener()
                            {
                                @Override
                                public void focusGained(FocusEvent e)
                                {
                                    mostRecentTableWithFocus = songTable;
                                }

                                @Override
                                public void focusLost(FocusEvent e)
                                {
                                }
                            });
                            songTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
                            tableScrollPane.setViewportView(songTable);

                            searchLibrarySplitPane.setRightComponent(tableScrollPane);

                            searchLabel.setText("Search:");

                            searchField.addActionListener(new ActionListener()
                                {
                                    @Override
                                    public void actionPerformed(ActionEvent e)
                                    {
                                        uiController.search(searchField.getText());
                                    }
                                });

                                titleCheckBox.setText("Title");
                                titleCheckBox.addActionListener(new ActionListener()
                                    {
                                        @Override
                                        public void actionPerformed(ActionEvent e)
                                        {
                                            uiController.toggleTitleSearchFlag();
                                        }
                                    });

                                    artistCheckBox.setText("Artist");
                                    artistCheckBox.addActionListener(new ActionListener()
                                        {
                                            @Override
                                            public void actionPerformed(ActionEvent e)
                                            {
                                                uiController.toggleArtistSearchFlag();
                                            }
                                        });

                                        albumCheckBox.setText("Album");
                                        albumCheckBox.addActionListener(new ActionListener()
                                            {
                                                @Override
                                                public void actionPerformed(ActionEvent e)
                                                {
                                                    uiController.toggleAlbumSearchFlag();
                                                }
                                            });

                                            genreCheckBox.setText("Genre");
                                            genreCheckBox.addActionListener(new ActionListener()
                                                {
                                                    @Override
                                                    public void actionPerformed(ActionEvent e)
                                                    {
                                                        uiController.toggleGenreSearchFlag();
                                                    }
                                                });

                                                yearCheckBox.setText("Year");
                                                yearCheckBox.setActionCommand("yearCheckBox");
                                                yearCheckBox.addActionListener(new ActionListener()
                                                    {
                                                        @Override
                                                        public void actionPerformed(ActionEvent e)
                                                        {
                                                            uiController.toggleYearSearchFlag();
                                                        }
                                                    });

                                                    allMusicButton.addActionListener(new ActionListener()
                                                        {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e)
                                                            {
                                                                uiController.reloadSongTable();
                                                            }
                                                        });
                                                        allMusicButton.setText("All Music");

                                                        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
                                                        searchPanel.setLayout(searchPanelLayout);
                                                        searchPanelLayout.setHorizontalGroup(
                                                            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(searchPanelLayout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(searchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                    .addComponent(searchField)
                                                                    .addGroup(searchPanelLayout.createSequentialGroup()
                                                                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                            .addComponent(genreCheckBox)
                                                                            .addComponent(albumCheckBox)
                                                                            .addComponent(artistCheckBox)
                                                                            .addComponent(titleCheckBox)
                                                                            .addComponent(yearCheckBox)
                                                                            .addComponent(allMusicButton))
                                                                        .addGap(0, 0, Short.MAX_VALUE)))
                                                                .addContainerGap())
                                                        );
                                                        searchPanelLayout.setVerticalGroup(
                                                            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(searchPanelLayout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(searchLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(titleCheckBox)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(artistCheckBox)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(albumCheckBox)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(genreCheckBox)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(yearCheckBox)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(allMusicButton)
                                                                .addContainerGap(347, Short.MAX_VALUE))
                                                        );

                                                        searchField.setActionCommand("searchField");
                                                        titleCheckBox.setActionCommand("titleCheckBox");
                                                        artistCheckBox.setActionCommand("artistCheckBox");
                                                        albumCheckBox.setActionCommand("albumCheckBox");
                                                        genreCheckBox.setActionCommand("genreCheckBox");

                                                        searchLibrarySplitPane.setLeftComponent(searchPanel);

                                                        libraryNowPlayingSplitPane.setLeftComponent(searchLibrarySplitPane);

                                                        nowPlayingScrollPane.setMinimumSize(new java.awt.Dimension(200, 24));
                                                        nowPlayingScrollPane.setPreferredSize(new java.awt.Dimension(400, 404));

                                                        nowPlayingTable.setModel(model.getNowPlayingTableModel());
                                                        nowPlayingTable.addFocusListener(new FocusListener()
                                                            {
                                                                @Override
                                                                public void focusGained(FocusEvent e)
                                                                {
                                                                    mostRecentTableWithFocus = nowPlayingTable;
                                                                }

                                                                @Override
                                                                public void focusLost(FocusEvent e)
                                                                {
                                                                }
                                                            });
                                                            nowPlayingScrollPane.setViewportView(nowPlayingTable);

                                                            libraryNowPlayingSplitPane.setRightComponent(nowPlayingScrollPane);

                                                            libraryPlayerSplitPane.setLeftComponent(libraryNowPlayingSplitPane);

                                                            playerPanel.setMaximumSize(new java.awt.Dimension(32767, 65));
                                                            playerPanel.setMinimumSize(new java.awt.Dimension(100, 65));
                                                            playerPanel.setPreferredSize(new java.awt.Dimension(1278, 65));
                                                            playerPanel.setLayout(new javax.swing.BoxLayout(playerPanel, javax.swing.BoxLayout.LINE_AXIS));

                                                            playbackSeekSplitPane.setDividerLocation(185);
                                                            playbackSeekSplitPane.setDividerSize(0);
                                                            playbackSeekSplitPane.setContinuousLayout(true);

                                                            playbackControlPanel.setLayout(new javax.swing.BoxLayout(playbackControlPanel, javax.swing.BoxLayout.LINE_AXIS));

                                                            previousSongButton.setText("<<");
                                                            previousSongButton.setMaximumSize(new java.awt.Dimension(55, 65));
                                                            previousSongButton.setMinimumSize(new java.awt.Dimension(55, 65));
                                                            previousSongButton.setPreferredSize(new java.awt.Dimension(55, 65));
                                                            playbackControlPanel.add(previousSongButton);

                                                            playPauseButton.setText("Play");
                                                            playPauseButton.setMaximumSize(new java.awt.Dimension(70, 65));
                                                            playPauseButton.setMinimumSize(new java.awt.Dimension(70, 65));
                                                            playPauseButton.setPreferredSize(new java.awt.Dimension(70, 65));
                                                            playPauseButton.addActionListener(new ActionListener()
                                                                {
                                                                    @Override
                                                                    public void actionPerformed(ActionEvent e)
                                                                    {
                                                                        if (mostRecentTableWithFocus == songTable)
                                                                        {

                                                                        }
                                                                        else if (mostRecentTableWithFocus == nowPlayingTable)
                                                                        {

                                                                        }
                                                                    }
                                                                });
                                                                playbackControlPanel.add(playPauseButton);

                                                                nextSongButton.setText(">>");
                                                                nextSongButton.setMaximumSize(new java.awt.Dimension(55, 65));
                                                                nextSongButton.setMinimumSize(new java.awt.Dimension(55, 65));
                                                                nextSongButton.setPreferredSize(new java.awt.Dimension(55, 65));
                                                                playbackControlPanel.add(nextSongButton);

                                                                playbackSeekSplitPane.setLeftComponent(playbackControlPanel);

                                                                infoSeekPanel.setLayout(new java.awt.BorderLayout(6, 6));

                                                                currentlyPlayingSongLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                                                                currentlyPlayingSongLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                                                                currentlyPlayingSongLabel.setText("Song Name - Artist Name");
                                                                currentlyPlayingSongLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 17, 0, 0));
                                                                infoSeekPanel.add(currentlyPlayingSongLabel, java.awt.BorderLayout.PAGE_START);

                                                                seekSlider.setMaximum(Integer.MAX_VALUE);
                                                                seekSlider.setDoubleBuffered(true);
                                                                seekSlider.setMaximumSize(new java.awt.Dimension(20000, 24));
                                                                seekSlider.setOpaque(false);
                                                                seekSlider.setPreferredSize(new java.awt.Dimension(1000, 24));
                                                                infoSeekPanel.add(seekSlider, java.awt.BorderLayout.CENTER);

                                                                currentSongTime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                                                                currentSongTime.setText("0:00:00");
                                                                currentSongTime.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 17, 0, 0));
                                                                infoSeekPanel.add(currentSongTime, java.awt.BorderLayout.WEST);

                                                                totalSongTime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                                                                totalSongTime.setText("0:00:00");
                                                                totalSongTime.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 20));
                                                                infoSeekPanel.add(totalSongTime, java.awt.BorderLayout.EAST);

                                                                playbackSeekSplitPane.setRightComponent(infoSeekPanel);

                                                                playerPanel.add(playbackSeekSplitPane);

                                                                libraryPlayerSplitPane.setRightComponent(playerPanel);

                                                                mainPanel.add(libraryPlayerSplitPane);

                                                                fileMenu.setText("File");
                                                                fileMenu.setName(""); // NOI18N

                                                                addSongsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
                                                                addSongsMenuItem.setText("Add Songs to Library...");
                                                                addSongsMenuItem.addActionListener(new ActionListener()
                                                                    {
                                                                        @Override
                                                                        public void actionPerformed(ActionEvent e)
                                                                        {
                                                                            // TODO: stop playback
                                                                            JFileChooser fc = new AudioFileChooser(false);
                                                                            switch (fc.showOpenDialog(null))
                                                                            {
                                                                                case APPROVE_OPTION:
                                                                                uiController.addSongsToLibrary(fc.getSelectedFiles());
                                                                                break;
                                                                                case CANCEL_OPTION:
                                                                                break;
                                                                                case ERROR_OPTION:
                                                                                JOptionPane.showMessageDialog(null, "Error adding songs to library");
                                                                                break;
                                                                            }
                                                                        }
                                                                    });
                                                                    addSongsMenuItem.setActionCommand("addSongsMenuItem");
                                                                    fileMenu.add(addSongsMenuItem);

                                                                    addFoldersMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
                                                                    addFoldersMenuItem.setText("Add Folders to Library...");
                                                                    addFoldersMenuItem.addActionListener(new ActionListener()
                                                                        {
                                                                            @Override
                                                                            public void actionPerformed(ActionEvent e)
                                                                            {
                                                                                JFileChooser fc = new AudioFileChooser(true);
                                                                                switch(fc.showOpenDialog(null))
                                                                                {
                                                                                    case APPROVE_OPTION:
                                                                                    uiController.addFoldersToLibrary(fc.getSelectedFiles());
                                                                                    break;
                                                                                    case CANCEL_OPTION:
                                                                                    break;
                                                                                    case ERROR_OPTION:
                                                                                    JOptionPane.showMessageDialog(null, "Error: could not add folders to library");
                                                                                    break;
                                                                                }
                                                                            }
                                                                        });
                                                                        fileMenu.add(addFoldersMenuItem);

                                                                        exitMenuItem.setText("Exit");
                                                                        exitMenuItem.addActionListener(new ActionListener()
                                                                            {
                                                                                @Override
                                                                                public void actionPerformed(ActionEvent e)
                                                                                {
                                                                                    System.exit(0);
                                                                                }
                                                                            });

                                                                            exitMenuItem.setActionCommand("exitMenuItem");
                                                                            fileMenu.add(exitMenuItem);

                                                                            menuBar.add(fileMenu);

                                                                            editMenu.setText("Edit");

                                                                            optionsMenuItem.setText("Options...");
                                                                            optionsMenuItem.setActionCommand("optionsMenuItem");
                                                                            optionsMenuItem.addActionListener(new ActionListener()
                                                                                {
                                                                                    @Override
                                                                                    public void actionPerformed(ActionEvent e)
                                                                                    {
                                                                                        uiController.openOptions();
                                                                                    }
                                                                                });
                                                                                editMenu.add(optionsMenuItem);

                                                                                menuBar.add(editMenu);

                                                                                setJMenuBar(menuBar);

                                                                                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                                                                                getContentPane().setLayout(layout);
                                                                                layout.setHorizontalGroup(
                                                                                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                );
                                                                                layout.setVerticalGroup(
                                                                                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                                                                                );

                                                                                pack();
                                                                            }// </editor-fold>//GEN-END:initComponents

    public static void main(String[] args)
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException |
                IllegalAccessException |
                javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SoundByteView.class.getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        }
        /*
         * Create and display the form
         */
        EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new SoundByteView(SoundByteModel.getInstance(),
                        new UIController(SoundByteModel.getInstance()),
                        new PlaybackController(SoundByteModel.getInstance())).
                        setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFoldersMenuItem;
    private javax.swing.JMenuItem addSongsMenuItem;
    private javax.swing.JMenuItem addToNowPlayingMenuItem;
    private javax.swing.JCheckBox albumCheckBox;
    private javax.swing.JButton allMusicButton;
    private javax.swing.JCheckBox artistCheckBox;
    private javax.swing.JMenuItem clearAllMenuItem;
    private javax.swing.JLabel currentSongTime;
    private javax.swing.JLabel currentlyPlayingSongLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox genreCheckBox;
    private javax.swing.JPanel infoSeekPanel;
    private javax.swing.JSplitPane libraryNowPlayingSplitPane;
    private javax.swing.JSplitPane libraryPlayerSplitPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextSongButton;
    private javax.swing.JMenuItem nowPlayingPlayMenuItem;
    private javax.swing.JPopupMenu nowPlayingPopupMenu;
    private javax.swing.JScrollPane nowPlayingScrollPane;
    private javax.swing.JTable nowPlayingTable;
    private javax.swing.JMenuItem optionsMenuItem;
    private javax.swing.JButton playPauseButton;
    private javax.swing.JPanel playbackControlPanel;
    private javax.swing.JSplitPane playbackSeekSplitPane;
    private javax.swing.JPanel playerPanel;
    private javax.swing.JButton previousSongButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JSplitPane searchLibrarySplitPane;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JSlider seekSlider;
    private javax.swing.JTable songTable;
    private javax.swing.JMenuItem songTablePlayMenuItem;
    private javax.swing.JPopupMenu songTablePopupMenu;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JCheckBox titleCheckBox;
    private javax.swing.JLabel totalSongTime;
    private javax.swing.JCheckBox yearCheckBox;
    // End of variables declaration//GEN-END:variables

}
